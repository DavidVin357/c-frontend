{"version":3,"sources":["theme.ts","components/Runtime.tsx","components/Code.tsx","code-chunks.ts","components/CodeExample.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_objectSpread","deep","styles","buttons","primary","fontWeight","color","bg","cursor","cards","padding","borderRadius","boxShadow","backgroundColor","text","paragraph","Runtime","_ref","result","warnings","error","printResult","clearOutput","_jsxs","Flex","sx","flexDirection","gap","minHeight","children","Card","_jsx","Paragraph","justifyContent","Button","onClick","Box","border","p","className","map","i","style","whiteSpace","concat","w","Text","Code","code","onChange","Editor","value","onValueChange","highlight","Highlight","defaultProps","theme","darkTheme","language","_ref2","tokens","getLineProps","getTokenProps","_Fragment","line","key","token","fontFamily","fontSize","height","insertSpaces","title","CodeExample","_useState","useState","_useState2","_slicedToArray","isCopied","setCopied","position","Heading","as","mb","CopyToClipboard","onCopy","setTimeout","LuCopyCheck","alignSelf","left","top","zIndex","LuCopy","borderColor","App","useEffect","window","addEventListener","e","setWarnings","prev","_toConsumableArray","detail","message","setPrintResult","codeChunks","setCode","_useState3","_useState4","_useState5","_useState6","setError","_useState7","_useState8","setResult","_useState9","_useState10","ThemeProvider","run","replaceAll","console","log","Grid","columns","px","py","gridTemplateColumns","example","textDecoration","target","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.76f5faec.chunk.js","sourcesContent":["import { deep } from '@theme-ui/presets'\n//eslint-disable-next-line\nexport default {\n  ...deep,\n  styles: {\n    ...deep.styles,\n  },\n  buttons: {\n    primary: {\n      fontWeight: 'bold',\n\n      color: 'text',\n      bg: 'muted',\n      cursor: 'pointer',\n    },\n  },\n\n  cards: {\n    primary: {\n      padding: 1,\n      borderRadius: 10,\n      boxShadow: '0 0 8px rgba(0, 0, 0, 0.125)',\n      backgroundColor: 'highlight',\n    },\n  },\n  text: {\n    paragraph: {\n      padding: 2,\n      fontWeight: 'bold',\n    },\n  },\n}\n","import { Box, Card, Flex, Paragraph, Text, Button } from 'theme-ui'\ninterface Props {\n  result: string\n  warnings: string[]\n  printResult: string[]\n  error: string\n  clearOutput: () => void\n}\n\nconst Runtime = ({\n  result,\n  warnings,\n  error,\n  printResult,\n  clearOutput,\n}: Props) => {\n  return (\n    <Flex sx={{ flexDirection: 'column', gap: 3, minHeight: '100%' }}>\n      <Card>\n        <Paragraph> Welcome to CLang Playground!</Paragraph>\n        <Paragraph>\n          CLang is an adaptation of the language C using TypeScript interpreter.\n        </Paragraph>\n      </Card>\n      <Flex sx={{ justifyContent: 'space-between' }}>\n        <Paragraph>Output:</Paragraph>\n        <Button onClick={() => clearOutput()}>Clear</Button>\n      </Flex>\n      <Box\n        sx={{ border: '1px solid #fff', p: 2, borderRadius: 3 }}\n        className='output'>\n        {/* Print results */}\n        {printResult.map((p, i) => {\n          return (\n            <span key={i} style={{ whiteSpace: 'pre-wrap' }}>{`${p}`}</span>\n          )\n        })}\n        {/* Warnings */}\n        {warnings.map((w, i) => (\n          <Box key={i}>\n            <Text color='#EEC643'>\n              Warning: <br />\n            </Text>\n            <Text>{w}</Text>\n            <br />\n          </Box>\n        ))}\n        {/* Error */}\n        {error && (\n          <Box>\n            <Text color='#ED4242'>{error}</Text>\n          </Box>\n        )}\n        {/*  Result */}\n        {result && (\n          <Box>\n            <Text sx={{ fontWeight: 'bold' }}>\n              Result: <br />\n            </Text>\n            <pre style={{ whiteSpace: 'pre-wrap' }}>{result}</pre>\n          </Box>\n        )}\n      </Box>\n    </Flex>\n  )\n}\n\nexport default Runtime\n","import Editor from 'react-simple-code-editor'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport darkTheme from 'prism-react-renderer/themes/nightOwl'\nimport { LuCopy } from 'react-icons/lu'\n\ninterface PropsTypes {\n  code: string\n\n  onChange: (code: string) => void\n  style?: object\n}\nconst Code = ({ code, onChange, style }: PropsTypes) => {\n  const highlight = (code: string) => (\n    <Highlight {...defaultProps} theme={darkTheme} code={code} language='c'>\n      {({ tokens, getLineProps, getTokenProps }) => (\n        <>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </>\n      )}\n    </Highlight>\n  )\n\n  return (\n    <Editor\n      value={code}\n      onValueChange={(code) => onChange(code)}\n      highlight={(code) => highlight(code)}\n      padding={10}\n      style={{\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n        fontSize: 12,\n        border: '1px solid #ffffff',\n        borderRadius: '2px',\n        height: '100%',\n        ...style,\n      }}\n      insertSpaces={true}\n    />\n  )\n}\nexport default Code\n","const findFactorial = `int main()\n{\n    // Find factorial of n\n    int n = 6;\n    int factorial = findFactorial(n);\n    printf(\"Factorial of %d is %d\", n, factorial);\n    return factorial;\n}\n\nint findFactorial(int n)\n{\n    if (n >= 1)\n    {\n        return n * findFactorial(n - 1);\n    }\n    return 1;\n}`\n\nconst sortArray = `\nvoid sort(int n, int* ptr) \n{ \n    int i, j, t; \n\n\n    for (i = 0; i < n; i++) { \n  \n        for (j = i + 1; j < n; j++) { \n            int* ptr2 = ptr + i; \n            if (*(ptr + j) < *(ptr + i)) { \n                t = *(ptr + i); \n                *(ptr + i) = *(ptr + j); \n                *(ptr + j) = t; \n            } \n        } \n    } \n  \n    for (i = 0; i < n; i++) {\n        int* resPtr = ptr + i;\n        printf(\"%d \", *resPtr); \n    }\n} \n  \nint main() \n{ \n    int n = 6; \n    int arr[] = { -5, 116, 23, 14, 12, 9 }; \n  \n    sort(n, arr); \n  \n    return 0; \n}`\n\nconst mergeArrays = `int main()\n{\n    int i, j;\n    // Declare arrays\n    int a[5] = {1, 2, 3, 4, 5};\n    int b[5] = {123, 6, 7, 8, 9, 10, 11, 12};\n\n    int arr1size = sizeof(a) / sizeof(int);\n    int arr2size = sizeof(b) / sizeof(int);\n    int arr_resultsize = arr1size + arr2size;\n    int c[arr_resultsize];\n\n    for (i = 0; i < arr1size; i++)\n    {\n        c[i] = a[i];\n    }\n\n    for (i = 0, j = arr1size;\n         j < arr_resultsize && i < arr2size; i++, j++)\n    {\n        c[j] = b[i];\n    }\n\n    for (i = 0; i < arr_resultsize; i++)\n    {\n        printf(\"%d \", c[i]);\n    }\n}`\n\nconst printFirstLetters = `int main() {\n    char str[] = \"C, Java, Python, CLang, Idris, OCaml, TypeScript\";\n    int i, j = 0;\n    // Traversing the Character array\n    for (i = 0; i < sizeof(str) - 1; i++)\n    {\n        if (i == 0 && str[i] != ' ') {\n            printf(\"%c \", str[i]);\n        }\n\n        else {\n            if (i > 0 && str[i - 1] == ' ') {\n                printf(\"%c \", str[i]);\n            }\n        }\n    }\n    return 0;\n}`\n\nconst checkPalindorme = `\nint isPalindrome(char string[])\n{\n    char* ptr;\n    char* rev;\n\n    ptr = string;\n    while (*ptr != '0') {\n        ++ptr;\n    }\n    --ptr;\n\n    rev = string;\n    while (ptr >= rev) {\n        if (*ptr == *rev) {\n            --ptr;\n            rev++;\n        }\n        else {\n            break;\n        }\n    }\n\n    if (rev > ptr){\n         printf(\"String '%s' is Palindrome \\n\", string);\n         return 1;\n        }\n    else {\n        printf(\"String '%s' is not a Palindrome \\n\", string);\n        return 0;\n    }\n}\n\nint main()\n{\n    char str1[1000] = \"madam\";\n    char str2[1000] = \"madan\";\n    isPalindrome(str1);\n    isPalindrome(str2);\n    return 0;\n}\n`\nconst findLargestNumberInArray = `\n#include <stdio.h>\n#include <stdlib.h>\n  \n// Function to find the largest element\n// using dynamic memory allocation\nint findLargest(int* arr, int N)\n{\n    int i;\n  \n    // Traverse the array arr[]\n    for (i = 1; i < N; i++) {\n  \n        // Update the largest element\n        if (*arr < *(arr + i)) {\n            *arr = *(arr + i);\n        }\n    }\n  \n    // Print the largest number\n    printf(\"Largest number is %d \", *arr);\n    return *arr;\n}\n  \nint main()\n{\n    int i, N = 4;\n  \n    int* arr;\n  \n    // Memory allocation to arr\n    arr = (int*)malloc(sizeof(int));\n  \n  \n    // Store the elements\n    *(arr + 0) = -14;\n    *(arr + 1) = 12;\n    *(arr + 2) = 139;\n    *(arr + 3) = 20;\n  \n    // Function Call\n    return findLargest(arr, N);\n}\n`\nconst findAverage = `float main() {\n    float numbers[100] = {1, 5, 10, 8, 5};\n    float sum = 0.0;\n    float avg;\n    int arrSize = sizeof(numbers) / sizeof(float);\n\n    for (int i = 0; i < arrSize; ++i) {\n        sum += numbers[i];\n    }\n\n    avg = sum / arrSize;\n    printf(\"Average = %.2f\", avg);\n    return avg;\n}`\n\nexport default [\n  {\n    title: 'Find factorial',\n    code: findFactorial,\n  },\n  {\n    title: 'Print first letter of each word',\n    code: printFirstLetters,\n  },\n  {\n    title: 'Sort array',\n    code: sortArray,\n  },\n  { title: 'Merge two arrays', code: mergeArrays },\n\n  { title: 'Check the word for being a palindrome', code: checkPalindorme },\n\n  {\n    title: 'Find the largest number in array',\n    code: findLargestNumberInArray,\n  },\n  { title: 'Find average of array', code: findAverage },\n]\n","/** @jsxImportSource theme-ui */\n\nimport { Box, Heading } from 'theme-ui'\nimport { LuCopy, LuCopyCheck } from 'react-icons/lu'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport Code from './Code'\nimport { useState } from 'react'\n\ninterface PropsTypes {\n  title: string\n  code: string\n}\nconst CodeExample = ({ code, title }: PropsTypes) => {\n  const [isCopied, setCopied] = useState(false)\n\n  const copy = () => {\n    setCopied(true)\n    setTimeout(() => setCopied(false), 1500)\n  }\n  return (\n    <Box\n      sx={{\n        position: 'relative',\n      }}>\n      <Heading as='h3' mb={2} color='#64074D'>\n        {title}\n      </Heading>\n      <CopyToClipboard text={code} onCopy={copy}>\n        {isCopied ? (\n          <LuCopyCheck\n            sx={{\n              alignSelf: 'end',\n              position: 'absolute',\n              left: '95%',\n              top: '55px',\n              zIndex: 2,\n              cursor: 'pointer',\n            }}\n          />\n        ) : (\n          <LuCopy\n            sx={{\n              alignSelf: 'end',\n              position: 'absolute',\n              left: '95%',\n              top: '55px',\n              zIndex: 2,\n              cursor: 'pointer',\n            }}\n          />\n        )}\n      </CopyToClipboard>\n\n      <Code\n        code={code}\n        onChange={() => {}}\n        style={{\n          borderRadius: '15px',\n          fontSize: 11,\n          borderColor: '#64074D',\n        }}\n      />\n    </Box>\n  )\n}\n\nexport default CodeExample\n","/** @jsxImportSource theme-ui */\n\nimport { Flex, ThemeProvider, Grid, Box, Heading, Button, Text } from 'theme-ui'\nimport theme from './theme'\nimport Runtime from './components/Runtime'\nimport Code from './components/Code'\nimport { run } from 'c-lang/dist'\nimport { useEffect, useState } from 'react'\nimport codeChunks from './code-chunks'\nimport CodeExample from './components/CodeExample'\n\nfunction App() {\n  useEffect(() => {\n    window.addEventListener('warning', (e: any) => {\n      setWarnings((prev) => [...prev, e.detail.message])\n    })\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('table', (e: any) => {\n      setPrintResult((prev) => [...prev, e.detail.message])\n    })\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('printf', (e: any) => {\n      setPrintResult((prev) => [...prev, e.detail.message])\n    })\n  }, [])\n\n  const [code, setCode] = useState(codeChunks[0].code)\n  const [warnings, setWarnings] = useState<string[]>([])\n  const [error, setError] = useState('')\n  const [result, setResult] = useState('')\n  const [printResult, setPrintResult] = useState<string[]>([])\n  const clearOutput = () => {\n    setWarnings([])\n    setPrintResult([])\n    setError('')\n    setResult('')\n  }\n  const runCode = () => {\n    clearOutput()\n    try {\n      const result = run(code.replaceAll('\\\\n', '\\n').replaceAll('\\\\0', '\\0'))\n      setResult((prev) => prev.concat('\\n' + result))\n    } catch (e: any) {\n      console.log(e.message)\n      setError('Compile Error')\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box>\n        <Box bg='muted'>\n          <Heading as='h3' sx={{ padding: '10px' }}>\n            CLang Playground\n          </Heading>\n        </Box>\n\n        <Flex bg='background' p={2}>\n          <Button onClick={runCode}>Run</Button>\n        </Flex>\n\n        <Grid columns={[2, '1fr 1fr']} px={3} gap={4}>\n          <Code code={code} onChange={(code: string) => setCode(code)} />\n          <Runtime\n            warnings={warnings}\n            error={error}\n            result={result}\n            printResult={printResult}\n            clearOutput={clearOutput}\n          />\n        </Grid>\n\n        <Box py={5}>\n          <Heading as='h2' p={4}>\n            Other Code Examples\n          </Heading>\n          <Grid\n            sx={{\n              px: 4,\n              gridTemplateColumns: 'repeat(2, 1fr)',\n              gap: 5,\n            }}>\n            {codeChunks.map((example) => (\n              <CodeExample title={example.title} code={example.code} />\n            ))}\n          </Grid>\n        </Box>\n        <footer>\n          Some examples are taken from\n          <a\n            sx={{\n              textDecoration: 'none',\n              color: '#64074D',\n            }}\n            target='_blank'\n            href='https://www.geeksforgeeks.org/c-programming-examples/'>\n            {' '}\n            GeeksForGeeks\n          </a>\n        </footer>\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\nroot.render(<App />)\n\nreportWebVitals()\n"],"sourceRoot":""}